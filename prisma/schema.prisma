generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String      @id @default(cuid())
  name                     String?
  surname                  String?
  username                 String?     @unique
  email                    String?     @unique
  emailVerified            DateTime?   @map("email_verified")
  emailVerificationToken   String?     @unique @map("email_verification_token")
  passwordHash             String?     @map("password_hash")
  resetPasswordToken       String?     @unique @map("reset_password_token")
  resetPasswordTokenExpiry DateTime?   @map("reset_password_token_expiery")
  image                    String?
  createdAt                DateTime    @default(now()) @map("created_at")
  role                     Role        @default(USER)
  accounts                 Account[]
  dnsRecords               DnsRecord[]
  sessions                 Session[]

  @@map("users")
}

model DnsRecord {
  content       String
  createdAt     DateTime    @default(now()) @map("created_at")
  disabled      Boolean     @default(false)
  domain        String
  id            String      @id @default(cuid())
  name          String
  order         Int?
  priority      Int? 
  ttl           Int         @default(1)
  type          String      @default("CNAME")
  cloudflareId  String?     @map("cloudflare_id")
  zoneId        String?     @map("zone_id")
  updatedAt     DateTime    @default(now()) @map("updated_at")
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String      @map("user_id")

  @@map("dns_records")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model NewsletterSubscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("newsletter_subscribers")
}

model error {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("errors")
}

enum Role {
  USER
  ADMIN
}
